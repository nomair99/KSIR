<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/styles/game.css">
    <title><%= room.name %></title>
</head>
<body>
    <div id="map"></div>
    <div id="game-panel">
        <div id="reinforcements-remaining"></div>
        <div id="end-phase">End Phase</div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/socket.io-client@2/dist/socket.io.js"></script>
    <script src="http://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>
    <script>
        var graph;
        var regions = {};
        var selectedRegion = null;
        var neighborRegions = [];
        var troopMarkers = {};
        var currentPlayerIndex = 0;
        var reinforcementsRemaining = 0;
        var playerList, currentPlayer, thisPlayer;
        var phase = 'reinforcement';

        var style = {
            fill: "#ddd",
            stroke: "#aaa",
            "stroke-width": 1,
            "stroke-linejoin": "round",
            cursor: "pointer"
        };
        var hoverStyle = {
            fill: "#FF7C78"
        };
        var neighborHoverStyle = {
            fill: "#A8BED5"
        };
        var selectedStyle = {
            fill: "#E8E889"
        };

        var playerStyles = [];
        playerStyles.push({
            fill: "#E8CE89"
        });
        playerStyles.push({
            fill: "#A6FFA3"
        });
        playerStyles.push({
            fill: "#89BAE8"
        });
        playerStyles.push({
            fill: "#FA96FF"
        });

        window.addEventListener('load', function() {
            let container = document.getElementById('map');
            map = new Raphael(container, 620, 600);
            
            socket = io('/game');

            socket.on('player name', function(data) {
                thisPlayer = data;
            });

            socket.on('player list', function(data) {
                console.log('got player list');
                playerList = data.playerList;
                currentPlayer = playerList[0].player;
                console.log(playerList);
            });

            socket.on('map', function(g) {

                graph = g;

                let playerIndex;
                for(let i = 0; i < graph.nodes.length; i++) {
                    regions[graph.nodes[i].obj.name] = map.path(graph.nodes[i].obj.path);
                    restoreStyle(graph.nodes[i]);
                    let bBox = regions[graph.nodes[i].obj.name].getBBox();

                    // draw circle with number of troops
                    let centerX = bBox.x + bBox.width / 2;
                    let centerY = bBox.y + bBox.height / 2;
                    map.circle(centerX, centerY, 10).attr({fill: "#A8BED5"});
                    troopMarkers[graph.nodes[i].obj.name] = map.text(centerX, centerY, graph.nodes[i].obj.troops);

                    regions[graph.nodes[i].obj.name][0].addEventListener('mouseover', function() {

                        // ? what if two regions have the same name
                        if(graph.nodes[i].obj.name !== selectedRegion) {
                            regions[graph.nodes[i].obj.name].animate(hoverStyle, 0);
                        }
                    }, true);
                    regions[graph.nodes[i].obj.name][0].addEventListener('click', function(e) {
                        e.stopPropagation();
                        if(currentPlayer !== thisPlayer) {
                            // don't allow selection if it's not this player's turn
                            return;
                        }

                        // clear all styles
                        restoreAllStyles();

                        if(phase === 'reinforcement') {
                            // TODO show popup
                            // don't show if reinforcementsRemaining <= 0
                            let num = 2;

                            selectedRegion = graph.nodes[i].obj.name;
                            regions[graph.nodes[i].obj.name].animate(selectedStyle, 0);
                            socket.emit('reinforce', {
                                region: graph.nodes[i].obj.name,
                                num: num
                            });

                        } else if(phase === 'attack') {
                            // TODO show a popup to select the number of troops to move
                            if(selectedRegion && neighborRegions.indexOf(graph.nodes[i].obj.name) !== -1) {
                                // a region was selected and the user then clicked on a neighboring region
    
                                let payload = {from: selectedRegion, to: graph.nodes[i].obj.name, num: 1};
                                console.log(payload);
                                socket.emit('attack', payload);
    
                                selectedRegion = null;
                                neighborRegions = [];
                            } else {
                                if(graph.nodes[i].obj.name !== selectedRegion) {
                                    for(let j = 0; j < graph.nodes.length; j++) {
                                        if(graph.adjacencyMatrix[i][j]) {
                                            neighborRegions.push(graph.nodes[j].obj.name);
                                            regions[graph.nodes[j].obj.name].animate(neighborHoverStyle, 0);
                                        }
                                    }
    
                                    regions[graph.nodes[i].obj.name].animate(selectedStyle, 0);
                                    selectedRegion = graph.nodes[i].obj.name;
                                } else {
                                    selectedRegion = null;
                                    neighborRegions = [];
                                }
                            }
                        }

                    }, true);

                    regions[graph.nodes[i].obj.name][0].addEventListener('mouseout', function() {

                        if(graph.nodes[i].obj.name === selectedRegion) {
                            regions[graph.nodes[i].obj.name].animate(selectedStyle, 0);
                        } else if(neighborRegions.indexOf(graph.nodes[i].obj.name) !== -1) {
                            regions[graph.nodes[i].obj.name].animate(neighborHoverStyle, 0);
                        } else {
                            restoreStyle(graph.nodes[i]);
                        }
                    }, true);
                }
            });

            socket.on('attack', function(data) {
                console.log('Got attack event');
                let indexFrom, indexTo;
                for(let i = 0; i < graph.nodes.length; i++) {
                    if(graph.nodes[i].obj.name === data.from) {
                        indexFrom = i;
                        console.log('Updating marker');
                        graph.nodes[i].obj.troops -= data.attackingDeaths;
                        troopMarkers[data.from].attr({text: graph.nodes[i].obj.troops})
                    }
                    if(graph.nodes[i].obj.name === data.to) {
                        indexTo = i;
                        console.log('Updating marker');
                        graph.nodes[i].obj.troops -= data.defendingDeaths;
                        troopMarkers[data.to].attr({text: graph.nodes[i].obj.troops});
                        
                    }
                }

                if(data.defeated) {
                    for(let j = 0; j < playerList.length; j++) {
                        if(playerList[j].player === graph.nodes[indexTo].obj.owner) {
                            playerList[j].alive = false;
                            break;
                        }
                    }

                    // TODO show animation ?
                }

                if(data.conquered) {
                    graph.nodes[indexTo].obj.owner = graph.nodes[indexFrom].obj.owner;
                }
            });

            socket.on('reinforce', function(data) {
                console.log('got reinforce event');
                for(let i = 0; i < graph.nodes.length; i++) {
                    if(graph.nodes[i].obj.name === data.region) {
                        graph.nodes[i].obj.troops += data.num;
                        troopMarkers[data.region].attr({text: graph.nodes[i].obj.troops});
                        break;
                    }
                }

                reinforcementsRemaining -= data.num;
                updateReinforcementsRemaining();
            });

            socket.on('reinforcements remaining', function(num) {
                reinforcementsRemaining = num;
                updateReinforcementsRemaining();
            });
        });

        document.addEventListener('click', function(e) {
            selectedRegion = null;
            neighborRegions = [];
            restoreAllStyles();
        });

        function restoreStyle(node) {
            let playerIndex;
            for(let j = 0; j < playerList.length; j++) {
                if(playerList[j].player === node.obj.owner) {
                    playerIndex = j;
                    break;
                }
            }

            regions[node.obj.name].attr(style);
            regions[node.obj.name].attr(playerStyles[playerIndex]);
        }

        function restoreAllStyles() {
            for(let j = 0; j < graph.nodes.length; j++) {
                restoreStyle(graph.nodes[j]);
            }
        }

        function updateReinforcementsRemaining() {
            console.log(`updating reinforcements remaining: ${reinforcementsRemaining}`);
            let reinforementsNumberBox = document.querySelector('#reinforcements-remaining');

            // remove existing text
            while(reinforementsNumberBox.firstChild) {
                reinforementsNumberBox.removeChild(reinforementsNumberBox.firstChild);
            }

            // display the new number
            reinforementsNumberBox.appendChild(document.createTextNode(reinforcementsRemaining));
        }

        function switchPlayer() {

            do {
                currentPlayerIndex = (currentPlayerIndex + 1) % playerList.length;
                currentPlayer = playerList[currentPlayerIndex].player;
            } while(!playerList[currentPlayerIndex].alive);
        }

        function nextPhase() {
            if(phase === 'reinforcement') {
                phase = 'attack';
            } else if(phase === 'attack') {
                phase = 'move';
            } else if(phase === 'move') {
                phase = 'reinforcement';
                switchPlayer();
            }
        }
    </script>
</body>
</html>